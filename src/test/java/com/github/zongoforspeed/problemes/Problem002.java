package com.github.zongoforspeed.problemes;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

public class Problem002 {
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    // By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    // find the sum of the even-valued terms.
    @Test
    void solve() {
        List<Long> fibonacci = new ArrayList<>();
        fibonacci.add(1L);
        fibonacci.add(2L);

        long fn1 = 1;
        long fn2 = 2;
        while (fn2 < 4000000L) {
            long s = fn1 + fn2;
            fn1 = fn2;
            fn2 = s;
            fibonacci.add(s);
        }

        long solution = fibonacci.stream().filter(n -> n % 2 == 0).mapToLong(n -> n).sum();
        assertThat(solution).isEqualTo(4613732);
    }
}
